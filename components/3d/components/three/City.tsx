/*
Initially auto-generated by: https://github.com/pmndrs/gltfjsx and then edited manually to add baked textures and new features.
Command: npx gltfjsx@6.1.4 gironajs.glb --transform
*/

import React, { useEffect, useRef, useState } from 'react';
import {
  useAnimations,
  useCursor,
  useGLTF,
  useTexture,
} from '@react-three/drei';
import usePlaceStore from '../../stores/usePlaceStore';
import PlaceDAO from '../../dao/PlaceDAO';
import { Group } from 'three';
import { GLTF } from 'three-stdlib';

type GLTFResult = GLTF & {
  nodes: {
    Estacio_roof: THREE.Mesh;
    Farinera_emissor: THREE.Mesh;
    Estacio_emissor: THREE.Mesh;
    Pavello_firal_emissor: THREE.Mesh;
    Estacio_ave: THREE.Mesh;
    Pavello_firal: THREE.Mesh;
    Auditori_emissor: THREE.Mesh;
    Auditori: THREE.Mesh;
    Catedral_emissor_round: THREE.Mesh;
    Farinera: THREE.Mesh;
    Cube: THREE.Mesh;
    Tren_1: THREE.Mesh;
    Catedral: THREE.Mesh;
    Tren_3: THREE.Mesh;
    Cube005: THREE.Mesh;
    Cube005_1: THREE.Mesh;
    Tren_5: THREE.Mesh;
    Final_loop: THREE.Mesh;
    Tren_2: THREE.Mesh;
    Tren_4: THREE.Mesh;
    Tren_6: THREE.Mesh;
    Terrain001: THREE.Mesh;
    Terrain001_1: THREE.Mesh;
    Edificis_generic: THREE.Mesh;
  };
  materials: {
    Estacio_solid: THREE.MeshStandardMaterial;
    Farinera_emissor: THREE.MeshStandardMaterial;
    Estacio_emissor: THREE.MeshStandardMaterial;
    Pavello_firal_emissor: THREE.MeshStandardMaterial;
    Pavello_firal_solid: THREE.MeshStandardMaterial;
    Auditori_emissor: THREE.MeshStandardMaterial;
    Auditori_solid: THREE.MeshStandardMaterial;
    Catedral_emissor: THREE.MeshStandardMaterial;
    Farinera_solid: THREE.MeshStandardMaterial;
    Tren: THREE.MeshPhysicalMaterial;
    Catedral_solid: THREE.MeshStandardMaterial;
    Tren_cap: THREE.MeshPhysicalMaterial;
    Tren_llum: THREE.MeshStandardMaterial;
    ['Marbre.001']: THREE.MeshPhysicalMaterial;
    ['overlay.002']: THREE.MeshPhysicalMaterial;
    Underground: THREE.MeshStandardMaterial;
  };
};

export default function City(props: JSX.IntrinsicElements['group']) {
  // -- STATE
  const [hoveredCursor, setHoveredCursor] = useState(false);
  useCursor(hoveredCursor /*'pointer', 'auto'*/);

  // -- STATE GLOBAL ZUSTAND
  const { setCurrentPlace } = usePlaceStore((state) => {
    return {
      setCurrentPlace: state.setCurrentPlace,
    };
  });

  // -- REFS
  // Three React Fiber invites to use useRef(null!) as the official way to useRef three react fiber components -> https://docs.pmnd.rs/react-three-fiber/tutorials/typescript#typing-with-useref
  // The exclamation mark is a non-null assertion that will let TS know that ref.current is defined when we access it in effects.
  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
  const group: React.MutableRefObject<Group> = useRef(null!);

  // -- MODELS && ANIMATIONS
  const { nodes, materials, animations } = useGLTF(
    '/assets/3d/models/gironajs.glb'
  ) as GLTFResult;
  const { actions } = useAnimations(animations, group);

  // -- TEXTURES
  const bakedEdificis = useTexture('/assets/3d/textures/baked_edificis.jpg');
  bakedEdificis.flipY = false;

  const bakedMap = useTexture('/assets/3d/textures/bakedmap.jpg');
  bakedMap.flipY = false;

  // -- EFFECTS
  useEffect(() => {
    //Execute all animations
    for (const action of Object.values(actions)) {
      action?.play();
    }
  }, [actions]);
  return (
    <group ref={group} {...props} dispose={null} castShadow={true}>
      <group name="Scene" castShadow={true}>
        <mesh
          name="Edificis_generic"
          geometry={nodes.Edificis_generic.geometry}
          position={[-6.32, -7.06, -0.21]}
          castShadow={true}
        >
          <meshBasicMaterial map={bakedEdificis} />
        </mesh>
        <group name="Terrain" position={[0, -3.12, 0]} castShadow={true}>
          <mesh
            name="Terrain001"
            geometry={nodes.Terrain001.geometry}
            material={materials['overlay.002']}
            castShadow={true}
          >
            <meshBasicMaterial map={bakedMap} />
          </mesh>
          <mesh
            name="Terrain001_1"
            geometry={nodes.Terrain001_1.geometry}
            material={materials.Underground}
            castShadow={true}
          />
        </group>
        <mesh
          receiveShadow={false}
          castShadow={false}
          onClick={() => setCurrentPlace(PlaceDAO.getEnum().GIRONAJS)}
          onPointerOver={() => setHoveredCursor(true)}
          onPointerOut={() => setHoveredCursor(false)}
          geometry={nodes.Farinera.geometry}
          position={nodes.Farinera.position}
        >
          <meshStandardMaterial color={'#FFF600'} />
        </mesh>
        <mesh
          geometry={nodes.Farinera_emissor.geometry}
          position={nodes.Farinera_emissor.position}
          rotation={nodes.Farinera_emissor.rotation}
        >
          <meshBasicMaterial />
        </mesh>

        <mesh
          onClick={() => setCurrentPlace(PlaceDAO.getEnum().AUDITORIUM)}
          onPointerOver={() => setHoveredCursor(true)}
          onPointerOut={() => setHoveredCursor(false)}
          geometry={nodes.Auditori.geometry}
          position={nodes.Auditori.position}
        >
          <meshBasicMaterial color={'#E5BFFF'} />
        </mesh>
        <mesh
          geometry={nodes.Auditori_emissor.geometry}
          position={nodes.Auditori_emissor.position}
        >
          <meshBasicMaterial />
        </mesh>

        <mesh
          onClick={() => setCurrentPlace(PlaceDAO.getEnum().CATHEDRAL)}
          onPointerOver={() => setHoveredCursor(true)}
          onPointerOut={() => setHoveredCursor(false)}
          geometry={nodes.Catedral.geometry}
          position={nodes.Catedral.position}
        >
          <meshStandardMaterial color={'#ffed99'} />
        </mesh>
        <mesh
          geometry={nodes.Catedral_emissor_round.geometry}
          position={nodes.Catedral_emissor_round.position}
        >
          <meshBasicMaterial />
        </mesh>

        <mesh
          onClick={() => setCurrentPlace(PlaceDAO.getEnum().STATION)}
          onPointerOver={() => setHoveredCursor(true)}
          onPointerOut={() => setHoveredCursor(false)}
          geometry={nodes.Estacio_roof.geometry}
          position={nodes.Estacio_roof.position}
        >
          <meshBasicMaterial color={'#E77877'} />
        </mesh>
        <mesh
          onClick={() => setCurrentPlace(PlaceDAO.getEnum().STATION)}
          onPointerOver={() => setHoveredCursor(true)}
          onPointerOut={() => setHoveredCursor(false)}
          geometry={nodes.Estacio_ave.geometry}
          position={nodes.Estacio_ave.position}
        >
          <meshBasicMaterial color={'#E77877'} />
        </mesh>
        <mesh
          geometry={nodes.Estacio_emissor.geometry}
          position={nodes.Estacio_emissor.position}
        >
          <meshBasicMaterial />
        </mesh>

        <mesh
          onClick={() => setCurrentPlace(PlaceDAO.getEnum().EVENTS)}
          onPointerOver={() => setHoveredCursor(true)}
          onPointerOut={() => setHoveredCursor(false)}
          geometry={nodes.Pavello_firal.geometry}
          position={nodes.Pavello_firal.position}
        >
          <meshBasicMaterial color={'#94C7FF'} />
        </mesh>
        <mesh
          geometry={nodes.Pavello_firal_emissor.geometry}
          position={nodes.Pavello_firal_emissor.position}
        >
          <meshBasicMaterial />
        </mesh>
        <mesh
          name="Tren_1"
          geometry={nodes.Tren_1.geometry}
          material={materials.Tren}
          position={[570.39, 17.89, -800.98]}
          rotation={[3.11, 0.64, 2.75]}
        />
        <group name="Tren_0" position={[579.43, 17.79, -812.43]}>
          <mesh
            name="Cube005"
            geometry={nodes.Cube005.geometry}
            material={materials.Tren_cap}
          />
          <mesh
            name="Cube005_1"
            geometry={nodes.Cube005_1.geometry}
            material={materials.Tren_llum}
          />
        </group>
        <mesh
          name="Tren_2"
          geometry={nodes.Tren_2.geometry}
          material={materials.Tren}
          position={[561.09, 18.07, -788.64]}
          rotation={[3.11, 0.64, 2.75]}
        />
        <mesh
          name="Tren_3"
          geometry={nodes.Tren_3.geometry}
          material={materials.Tren}
          position={[551.78, 18.22, -776.3]}
          rotation={[3.11, 0.64, 2.75]}
        />
        <mesh
          name="Tren_4"
          geometry={nodes.Tren_4.geometry}
          material={materials.Tren}
          position={[542.44, 18.32, -763.98]}
          rotation={[3.12, 0.65, 2.75]}
        />
        <mesh
          name="Tren_5"
          geometry={nodes.Tren_5.geometry}
          material={materials.Tren}
          position={[533.11, 18.39, -751.65]}
          rotation={[3.12, 0.65, 2.74]}
        />
        <mesh
          name="Tren_6"
          geometry={nodes.Tren_6.geometry}
          material={materials.Tren}
          position={[523.78, 18.4, -739.32]}
          rotation={[3.12, 0.65, 2.74]}
        />
        <mesh
          name="Final_loop"
          geometry={nodes.Final_loop.geometry}
          material={materials['Marbre.001']}
          position={[518.22, 23.03, -742.54]}
          rotation={[0, -0.58, 0]}
        />
      </group>
    </group>
  );
}

useGLTF.preload('/assets/3d/models/gironajs.glb');
